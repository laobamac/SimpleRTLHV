name: Build and Sign KEXT

on:
  push:
    branches: [ main ]
  release:
    types: [created]

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        # 修正为对象数组格式
        config: 
          - name: Debug
            sign: false
          - name: Release
            sign: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Find Xcode project
      id: find_project
      run: |
        PROJECT_PATH=$(find . -name "*.xcodeproj" | head -1)
        if [ -z "$PROJECT_PATH" ]; then
          echo "::error::Xcode project not found!"
          exit 1
        fi
        echo "PROJECT_PATH=$PROJECT_PATH" >> $GITHUB_ENV
        
        SCHEME=$(xcodebuild -list -project "$PROJECT_PATH" | awk '/Schemes:/,0' | tail -n +2 | xargs | cut -d ' ' -f1)
        echo "SCHEME=$SCHEME" >> $GITHUB_ENV
        echo "Using scheme: $SCHEME"

    # 签名设置仅对release事件和Release配置生效
    - name: Setup signing
      if: ${{ github.event_name == 'release' && matrix.config.sign == 'true' }}
      run: |
        echo "Setting up code signing..."
        KEYCHAIN_PATH="$RUNNER_TEMP/signing_keychain.keychain"
        KEYCHAIN_PASSWORD=$(openssl rand -base64 12)
        
        # 创建临时钥匙链
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security list-keychains -s "$KEYCHAIN_PATH" $(security list-keychains | sed 's/"//g')
        security default-keychain -s "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 3600 "$KEYCHAIN_PATH"
        
        # 导入证书
        echo "Importing certificate from secrets..."
        echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k "$KEYCHAIN_PATH" -P "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        
        # 设置分区列表
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        
        # 设置身份变量
        CERT_IDENTITY='${{ secrets.MACOS_CERTIFICATE_IDENTITY }}'
        echo "CERT_IDENTITY='$CERT_IDENTITY'" >> $GITHUB_ENV
        echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV
        echo "KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_ENV
        echo "Signing identity: $CERT_IDENTITY"

    - name: Build KEXT
      run: |
        # 设置签名参数
        if [ "${{ github.event_name }}" = "release" ] && [ "${{ matrix.config.sign }}" = "true" ]; then
          echo "Building with signing for ${{ matrix.config.name }}..."
          SIGNING_SETTINGS="CODE_SIGN_IDENTITY='$CERT_IDENTITY' CODE_SIGNING_REQUIRED=YES OTHER_CODE_SIGN_FLAGS=--keychain '$KEYCHAIN_PATH'"
        else
          echo "Building without signing for ${{ matrix.config.name }}..."
          SIGNING_SETTINGS="CODE_SIGN_IDENTITY='' CODE_SIGNING_REQUIRED=NO"
        fi
        
        # 执行编译
        xcodebuild clean build \
          -project "$PROJECT_PATH" \
          -scheme "$SCHEME" \
          -configuration ${{ matrix.config.name }} \
          $SIGNING_SETTINGS

    - name: Extract version from built KEXT
      id: get_version
      run: |
        echo "Extracting version from built KEXT..."
        # 获取构建目录
        BUILD_DIR="$(xcodebuild -project "$PROJECT_PATH" -scheme "$SCHEME" -configuration ${{ matrix.config.name }} -showBuildSettings | grep -m 1 'BUILT_PRODUCTS_DIR' | grep -oEi '\/.*')"
        echo "Build directory: $BUILD_DIR"
        
        # 查找KEXT文件
        KEXT_PATH=$(find "$BUILD_DIR" -name "*.kext" -maxdepth 1 | head -1)
        if [ -z "$KEXT_PATH" ]; then
          echo "::error::KEXT file not found in build directory"
          exit 1
        fi
        echo "Found KEXT at: $KEXT_PATH"
        
        # 从编译后的KEXT中提取Info.plist
        PLIST_PATH="$KEXT_PATH/Contents/Info.plist"
        if [ ! -f "$PLIST_PATH" ]; then
          echo "::error::Info.plist not found in built KEXT"
          exit 1
        fi
        
        # 获取版本号
        VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST_PATH" 2>/dev/null || /usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST_PATH")
        CLEAN_VERSION=$(echo "$VERSION" | tr -d '[:space:]' | sed 's/[^a-zA-Z0-9._-]//g')
        echo "Extracted version: $CLEAN_VERSION"
        echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$CLEAN_VERSION" >> $GITHUB_ENV
        
        # 获取项目名称
        PROJECT_NAME=$(/usr/libexec/PlistBuddy -c "Print :CFBundleName" "$PLIST_PATH" 2>/dev/null || true)
        if [ -z "$PROJECT_NAME" ]; then
          PROJECT_NAME=$(basename -s .git "$(git config --get remote.origin.url)")
          echo "Using repository name as project name: $PROJECT_NAME"
        else
          echo "Using CFBundleName as project name: $PROJECT_NAME"
        fi
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

    - name: Package KEXT
      run: |
        echo "Packaging KEXT..."
        BUILD_DIR="$(xcodebuild -project "$PROJECT_PATH" -scheme "$SCHEME" -configuration ${{ matrix.config.name }} -showBuildSettings | grep -m 1 'BUILT_PRODUCTS_DIR' | grep -oEi '\/.*')"
        KEXT_PATH=$(find "$BUILD_DIR" -name "*.kext" -maxdepth 1 | head -1)
        
        ZIP_NAME="${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ matrix.config.name }}.zip"
        echo "Creating ZIP: $ZIP_NAME"
        ditto -c -k --keepParent "$KEXT_PATH" "$ZIP_NAME"
        echo "ZIP_PATH=$(pwd)/$ZIP_NAME" >> $GITHUB_ENV
        ls -lh "$ZIP_NAME"

    # 签名验证仅对release事件和Release配置生效
    - name: Verify signature
      if: ${{ github.event_name == 'release' && matrix.config.sign == 'true' }}
      run: |
        echo "Verifying code signature..."
        BUILD_DIR="$(xcodebuild -project "$PROJECT_PATH" -scheme "$SCHEME" -configuration ${{ matrix.config.name }} -showBuildSettings | grep -m 1 'BUILT_PRODUCTS_DIR' | grep -oEi '\/.*')"
        KEXT_PATH=$(find "$BUILD_DIR" -name "*.kext" -maxdepth 1 | head -1)
        
        echo "Verifying: $KEXT_PATH"
        codesign -dvv "$KEXT_PATH"
        codesign -vvv --strict "$KEXT_PATH" || (echo "::error::Code signature verification failed"; exit 1)
        echo "✅ Code signature verified"

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ matrix.config.name }}
        path: ${{ env.ZIP_PATH }}

    # 清理钥匙链
    - name: Cleanup keychain
      if: ${{ github.event_name == 'release' && matrix.config.sign == 'true' && env.KEYCHAIN_PATH != '' }}
      run: |
        echo "Cleaning up temporary keychain..."
        security delete-keychain "$KEYCHAIN_PATH"
        echo "Keychain removed"

    - name: Upload to Release
      if: ${{ github.event_name == 'release' }}
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.PROJECT_NAME }}-${{ env.VERSION }}-Debug.zip
          ${{ env.PROJECT_NAME }}-${{ env.VERSION }}-Release.zip
